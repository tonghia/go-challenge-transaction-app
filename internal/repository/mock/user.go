// Code generated by MockGen. DO NOT EDIT.
// Source: ./user.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/tonghia/go-challenge-transaction-app/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepositorier is a mock of UserRepositorier interface.
type MockUserRepositorier struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositorierMockRecorder
}

// MockUserRepositorierMockRecorder is the mock recorder for MockUserRepositorier.
type MockUserRepositorierMockRecorder struct {
	mock *MockUserRepositorier
}

// NewMockUserRepositorier creates a new mock instance.
func NewMockUserRepositorier(ctrl *gomock.Controller) *MockUserRepositorier {
	mock := &MockUserRepositorier{ctrl: ctrl}
	mock.recorder = &MockUserRepositorierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositorier) EXPECT() *MockUserRepositorierMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockUserRepositorier) GetByID(ctx context.Context, id int64) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserRepositorierMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserRepositorier)(nil).GetByID), ctx, id)
}
